import { Telegraf, Context } from "telegraf";

import { eq } from "drizzle-orm";
import { ClientService } from "../client/client-service";
import { bots } from "../database/schema";
import { db } from "../database";
import { MessageService } from "../telegram/message-service";
import { TelegramMediaService } from "../telegram/media-service";
import { UserSessionService } from "./user-session";
import { allowedChannelsService } from "../telegram/allowed-channels-service";
import fs from "fs/promises";

export interface BotData {
  name: string;
  token: string;
  isActive?: boolean;
  webhookUrl?: string;
  startMessage: string;
  file?: string;
}

export interface CustomMessageData {
  message: string;
  channelId?: string;
  buttonText?: string;
  mediaFile?: Buffer;
  mediaType?: "photo" | "video" | "audio" | "document";
  mediaFilename?: string;
}

export class BotService {
  private activeBots: Map<number, Telegraf> = new Map();
  private userService = new ClientService();
  private mediaService = new TelegramMediaService();
  private channelsService = allowedChannelsService;
  private sessionService = new UserSessionService();
  private messageService = new MessageService();
  constructor() {
    const start = async () => {
      const bots = await this.getAllBots();
      bots.map((bot) => bot.isActive && this.startBot(bot.id));
    };
    start();
  }
  async createBot(botData: BotData) {
    try {
      const testBot = new Telegraf(botData.token);
      const botInfo = await testBot.telegram.getMe();

      const newBot = await db
        .insert(bots)
        .values({
          startMessageFile: botData.file,
          startMessage: botData.startMessage,
          name: botData.name,
          token: botData.token,
          username: botInfo.username,
          webhookUrl: botData.webhookUrl,
        })
        .returning();

      return newBot[0];
    } catch (error) {
      throw new Error(`–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: ${error}`);
    }
  }

  async startBot(botId: number) {
    const botRecord = await this.getBotById(botId);
    if (!botRecord) {
      throw new Error("–ë–æ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π");
    }

    if (this.activeBots.has(botId)) {
      throw new Error("–ë–æ—Ç –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π");
    }

    const bot = new Telegraf(botRecord.token);

    this.setupBotHandlers(botRecord, bot);

    try {
      if (botRecord.webhookUrl) {
        bot.telegram.setWebhook(botRecord.webhookUrl);
      } else {
        bot.launch();
      }

      this.activeBots.set(botId, bot);
      await db
        .update(bots)
        .set({ isActive: true, updatedAt: new Date() })
        .where(eq(bots.id, botId));

      return { success: true, message: "–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∏–π" };
    } catch (error) {
      throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: ${error}`);
    }
  }

  async stopBot(botId: number) {
    const botRecord = await this.getBotById(botId);
    if (!botRecord) {
      throw new Error("–ë–æ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π");
    }

    const bot = this.activeBots.get(botId);
    if (!bot) {
      throw new Error("–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π");
    }

    try {
      bot.stop();
      this.activeBots.delete(botId);

      await db
        .update(bots)
        .set({ isActive: false, updatedAt: new Date() })
        .where(eq(bots.id, botId));

      return { success: true, message: "–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π" };
    } catch (error) {
      throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞: ${error}`);
    }
  }

  async deleteBot(botId: number) {
    // –°–ø–æ—á–∞—Ç–∫—É –∑—É–ø–∏–Ω—è—î–º–æ –±–æ—Ç–∞ —è–∫—â–æ –≤—ñ–Ω –∑–∞–ø—É—â–µ–Ω–∏–π
    if (this.activeBots.has(botId)) {
      await this.stopBot(botId);
    }

    const deletedBot = await db
      .delete(bots)
      .where(eq(bots.id, botId))
      .returning();

    if (deletedBot.length === 0) {
      throw new Error("–ë–æ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π");
    }

    return { success: true, message: "–ë–æ—Ç –≤–∏–¥–∞–ª–µ–Ω–∏–π", bot: deletedBot[0] };
  }

  async getBotById(botId: number) {
    const bot = await db.select().from(bots).where(eq(bots.id, botId)).limit(1);

    return bot[0] || null;
  }

  async getAllBots() {
    return await db.select().from(bots);
  }

  async updateBot(botId: number, updateData: Partial<BotData>) {
    const updatedBot = await db
      .update(bots)
      .set({
        ...updateData,
        updatedAt: new Date(),
      })
      .where(eq(bots.id, botId))
      .returning();

    return updatedBot[0];
  }

  async sendCustomMessage(
    botId: number,
    userTelegramId: string,
    messageData: CustomMessageData,
  ) {
    const bot = this.activeBots.get(botId);
    if (!bot) {
      throw new Error("–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π");
    }

    try {
      let keyboard;
      const channel = await this.channelsService.getChannelById(
        Number(messageData.channelId),
      );
      if (messageData.channelId) {
        keyboard = {
          inline_keyboard: [
            [
              {
                text: messageData.buttonText || "üì∫ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞–Ω–∞–ª",
                callback_data: `channel_${channel.telegramChannelId}`,
              },
            ],
          ],
        };
      }

      let sentMessage;

      if (messageData.mediaFile && messageData.mediaType) {
        const mediaOptions = {
          caption: messageData.message,
          parse_mode: "HTML" as const,
          reply_markup: keyboard,
        };

        switch (messageData.mediaType) {
          case "photo":
            sentMessage = await bot.telegram.sendPhoto(
              userTelegramId,
              { source: messageData.mediaFile },
              mediaOptions,
            );
            break;

          case "video":
            sentMessage = await bot.telegram.sendVideo(
              userTelegramId,
              { source: messageData.mediaFile },
              mediaOptions,
            );
            break;

          case "audio":
            sentMessage = await bot.telegram.sendAudio(
              userTelegramId,
              { source: messageData.mediaFile },
              mediaOptions,
            );
            break;

          case "document":
            sentMessage = await bot.telegram.sendDocument(
              userTelegramId,
              {
                source: messageData.mediaFile,
                filename: messageData.mediaFilename || "document",
              },
              mediaOptions,
            );
            break;
        }
      } else {
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        sentMessage = await bot.telegram.sendMessage(
          userTelegramId,
          messageData.message,
          {
            parse_mode: "HTML",
            reply_markup: keyboard,
          },
        );
      }

      return {
        success: true,
        message: "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ",
        messageId: sentMessage.message_id,
      };
    } catch (error) {
      throw new Error(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${error}`);
    }
  }

  async broadcastCustomMessage(
    botId: number,
    messageData: CustomMessageData,
    userIds?: string[],
  ) {
    const bot = this.activeBots.get(botId);
    if (!bot) {
      throw new Error("–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π");
    }

    const results = [];
    let targetUsers: string[];

    if (userIds && userIds.length > 0) {
      targetUsers = userIds;
    } else {
      const users = await this.userService.getAllUsers();
      targetUsers = users.map((user) => user.telegramId);
    }

    for (const userId of targetUsers) {
      try {
        const result = await this.sendCustomMessage(botId, userId, messageData);
        results.push({
          userId,
          success: true,
          messageId: result.messageId,
        });
      } catch (error: any) {
        results.push({
          userId,
          success: false,
          error: error?.message,
        });
      }
      await new Promise((resolve) => setTimeout(resolve, 100));
    }

    return {
      success: true,
      message: "–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
      results,
      totalSent: results.filter((r) => r.success).length,
      totalFailed: results.filter((r) => !r.success).length,
    };
  }

  private setupBotHandlers(botData: any, bot: Telegraf) {
    bot.start(async (ctx: Context) => {
      try {
        const userData = {
          telegramId: ctx.from?.id.toString() || "",
          username: ctx.from?.username,
          firstName: ctx.from?.first_name,
          lastName: ctx.from?.last_name,
          botId: botData.id,
        };

        const user = await this.userService.findOrCreateUser(userData);
        const userId = ctx.from?.id.toString() || "";

        // –û—á–∏—â—É—î–º–æ —Å–µ—Å—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        this.sessionService.clearUserSession(userId);

        // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤
        const channels = await this.channelsService.getAllChannels();
        let message;
        if (channels.length === 0) {
          if (botData.startMessageFile) {
            try {
              const imageBuffer = Buffer.from(
                botData.startMessageFile,
                "base64",
              );

              message = await ctx.replyWithPhoto(
                { source: imageBuffer },
                {
                  caption: botData.startMessage,
                },
              );
            } catch (imageError) {
              console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏:", imageError);
              message = await ctx.reply(botData.startMessage);
            }
          } else {
            message = await ctx.reply(botData.startMessage);
          }
          this.sessionService.setLastTelegramMessage(
            userId,
            message.message_id,
          );
          return;
        }

        const keyboard = this.createChannelsKeyboard(channels);
        if (botData.startMessageFile) {
          try {
            const imageBuffer = Buffer.from(botData.startMessageFile, "base64");

            message = await ctx.replyWithPhoto(
              { source: imageBuffer },
              {
                caption: botData.startMessage,
                reply_markup: keyboard,
              },
            );
          } catch (imageError) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏:", imageError);
            // –Ø–∫—â–æ –Ω–µ –≤–¥–∞—î—Ç—å—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message = await ctx.reply(botData.startMessage, {
              reply_markup: keyboard,
            });
          }
        } else {
          message = await ctx.reply(botData.startMessage, {
            reply_markup: keyboard,
          });
        }

        this.sessionService.setLastTelegramMessage(userId, message.message_id);
      } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ /start:", error);
        await ctx.reply("Try later");
      }
    });

    // –û–±—Ä–æ–±–Ω–∏–∫ inline –∫–Ω–æ–ø–æ–∫
    bot.on("callback_query", async (ctx) => {
      try {
        if (!ctx.callbackQuery || !("data" in ctx.callbackQuery)) return;

        const data = ctx.callbackQuery.data;
        const userId = ctx.from?.id.toString() || "";

        await ctx.answerCbQuery();

        if (data.startsWith("channel_")) {
          await this.handleChannelSelection(ctx, data, userId);
        } else if (data === "next") {
          await this.handleNext(ctx, userId);
        } else if (data === "prev") {
          await this.handlePrevious(ctx, userId);
        } else if (data === "exit") {
          await this.handleExit(ctx, userId);
        }
      } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback:", error);
      }
    });

    // –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    bot.catch((err: any) => {
      console.error("–ü–æ–º–∏–ª–∫–∞ –±–æ—Ç–∞:", err);
    });

    // Graceful stop
    process.once("SIGINT", () => bot.stop("SIGINT"));
    process.once("SIGTERM", () => bot.stop("SIGTERM"));
  }

  private createChannelsKeyboard(channels: any[]) {
    const buttons = channels.map((channel) => [
      {
        text: channel.name || `–ö–∞–Ω–∞–ª ${channel.telegramChannelId}`,
        callback_data: `channel_${channel.telegramChannelId}`,
      },
    ]);

    return { inline_keyboard: buttons };
  }

  private createNavigationKeyboard(hasNext: boolean, hasPrev: boolean) {
    const buttons = [];

    const navRow = [];
    if (hasPrev) navRow.push({ text: "‚¨ÖÔ∏è", callback_data: "prev" });
    if (hasNext) navRow.push({ text: "‚û°Ô∏è", callback_data: "next" });

    if (navRow.length > 0) buttons.push(navRow);
    buttons.push([{ text: "‚ùå", callback_data: "exit" }]);

    return { inline_keyboard: buttons };
  }

  private async handleChannelSelection(ctx: any, data: string, userId: string) {
    const channelId = data.replace("channel_", "");
    this.sessionService.setCurrentChannel(userId, channelId);

    // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const lastMessageId = this.sessionService.getLastTelegramMessage(userId);
    if (lastMessageId) {
      try {
        await ctx.deleteMessage(lastMessageId);
      } catch (error) {
        console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", error);
      }
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä—à–∏–π –ø–æ—Å—Ç –∫–∞–Ω–∞–ª—É
    const firstMessage =
      await this.messageService.getFirstMessageByChannelId(channelId);

    if (!firstMessage) {
      const message = await ctx.reply(
        "üì≠ –£ —Ü—å–æ–º—É –∫–∞–Ω–∞–ª—ñ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø–æ—Å—Ç—ñ–≤.",
      );
      this.sessionService.setLastTelegramMessage(userId, message.message_id);
      return;
    }

    await this.sendMessageWithNavigation(ctx, firstMessage, userId);
  }

  private async handleNext(ctx: any, userId: string) {
    const currentChannel = this.sessionService.getCurrentChannel(userId);
    const currentMessage = this.sessionService.getCurrentMessage(userId);

    if (!currentChannel || !currentMessage) {
      await ctx.reply("–ü–æ–º–∏–ª–∫–∞: –≤—Ç—Ä–∞—á–µ–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—ñ—ó");
      return;
    }

    const nextMessage = await this.messageService.getNextMessage(
      currentChannel,
      currentMessage.messageDate,
    );

    if (!nextMessage) {
      await ctx.answerCbQuery("–¶–µ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª—ñ");
      return;
    }

    // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const lastMessageId = this.sessionService.getLastTelegramMessage(userId);
    if (lastMessageId) {
      try {
        await ctx.deleteMessage(lastMessageId);
      } catch (error) {
        console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", error);
      }
    }

    await this.sendMessageWithNavigation(ctx, nextMessage, userId);
  }

  private async handlePrevious(ctx: any, userId: string) {
    const currentChannel = this.sessionService.getCurrentChannel(userId);
    const currentMessage = this.sessionService.getCurrentMessage(userId);

    if (!currentChannel || !currentMessage) {
      await ctx.reply("–ü–æ–º–∏–ª–∫–∞: –≤—Ç—Ä–∞—á–µ–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—ñ—ó");
      return;
    }

    const prevMessage = await this.messageService.getPreviousMessage(
      currentChannel,
      currentMessage.messageDate,
    );

    if (!prevMessage) {
      await ctx.answerCbQuery("–¶–µ –ø–µ—Ä—à–∏–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª—ñ");
      return;
    }

    // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const lastMessageId = this.sessionService.getLastTelegramMessage(userId);
    if (lastMessageId) {
      try {
        await ctx.deleteMessage(lastMessageId);
      } catch (error) {
        console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", error);
      }
    }

    await this.sendMessageWithNavigation(ctx, prevMessage, userId);
  }

  private async handleExit(ctx: any, userId: string) {
    // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const lastMessageId = this.sessionService.getLastTelegramMessage(userId);
    if (lastMessageId) {
      try {
        await ctx.deleteMessage(lastMessageId);
      } catch (error) {
        console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", error);
      }
    }

    // –û—á–∏—â—É—î–º–æ —Å–µ—Å—ñ—é
    this.sessionService.clearUserSession(userId);
  }

  private async sendMessageWithNavigation(
    ctx: any,
    message: any,
    userId: string,
  ) {
    const currentChannel = this.sessionService.getCurrentChannel(userId);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –Ω–∞—Å—Ç—É–ø–Ω—ñ/–ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const hasNext = !!(await this.messageService.getNextMessage(
      currentChannel!,
      message.date,
    ));
    const hasPrev = !!(await this.messageService.getPreviousMessage(
      currentChannel!,
      message.date,
    ));

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Å–µ—Å—ñ—é
    this.sessionService.setCurrentMessage(userId, message.id, message.date);

    const keyboard = this.createNavigationKeyboard(hasNext, hasPrev);

    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const position = await this.messageService.getMessagePosition(
      currentChannel!,
      message.date,
    );
    const totalCount = await this.messageService.getMessageCount(
      currentChannel!,
    );

    let messageText = "";

    if (message.text) {
      messageText += message.text;
    }
    // –Ø–∫—â–æ —î –º–µ–¥—ñ–∞, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑ –º–µ–¥—ñ–∞
    if (message.media && message.media.length > 0) {
      const media = message.media[0]; // –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–µ –º–µ–¥—ñ–∞

      try {
        let sentMessage;

        if (media.localFilePath) {
          const buffer = await fs.readFile(media.localFilePath);

          if (media.type === "photo") {
            sentMessage = await ctx.replyWithPhoto(
              { source: buffer },
              {
                caption: messageText,
                reply_markup: keyboard,
              },
            );
          } else if (media.type === "video") {
            sentMessage = await ctx.replyWithVideo(
              { source: buffer },
              {
                caption: messageText,
                reply_markup: keyboard,
              },
            );
          } else if (media.type === "audio") {
            sentMessage = await ctx.replyWithAudio(
              { source: buffer },
              {
                caption: messageText,
                reply_markup: keyboard,
              },
            );
          } else {
            // –î–ª—è —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç
            sentMessage = await ctx.replyWithDocument(
              { source: buffer },
              {
                caption: messageText,
                reply_markup: keyboard,
              },
            );
          }
        } else {
          sentMessage = await ctx.reply(messageText, {
            reply_markup: keyboard,
          });
        }

        this.sessionService.setLastTelegramMessage(
          userId,
          sentMessage.message_id,
        );
      } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –º–µ–¥—ñ–∞:", error);
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        const sentMessage = await ctx.reply({
          reply_markup: keyboard,
        });
        this.sessionService.setLastTelegramMessage(
          userId,
          sentMessage.message_id,
        );
      }
    } else {
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç
      const sentMessage = await ctx.reply(messageText, {
        reply_markup: keyboard,
      });
      this.sessionService.setLastTelegramMessage(
        userId,
        sentMessage.message_id,
      );
    }
  }
  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –±–æ—Ç—ñ–≤
  getActiveBots() {
    return this.activeBots;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ –≤—Å—ñ—Ö –±–æ—Ç—ñ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Ä–æ–±–æ—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
  async stopAllBots() {
    for (const [botId, bot] of this.activeBots) {
      try {
        bot.stop();
        await db
          .update(bots)
          .set({ isActive: false, updatedAt: new Date() })
          .where(eq(bots.id, botId));
      } catch (error) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞ ${botId}:`, error);
      }
    }
    this.activeBots.clear();
  }
}
