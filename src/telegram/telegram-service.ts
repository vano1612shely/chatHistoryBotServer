import { Api, TelegramClient } from "telegram";
import { StringSession } from "telegram/sessions";
import { db } from "../database";
import { messages, telegramSessions } from "../database/schema";
import { and, eq, inArray, not } from "drizzle-orm";
import { EventEmitter } from "events";
import { TelegramMediaService } from "./media-service";
import { allowedChannelsService } from "./allowed-channels-service";
import * as cron from "node-cron";

export interface TelegramConfig {
  apiId: number;
  apiHash: string;
  sessionString?: string;
  downloadMedia?: boolean;
  mediaDir?: string;
  enableSync?: boolean; // –í–∫–ª—é—á–∏—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
  syncOnStart?: boolean; // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
}

export interface AuthData {
  phoneNumber?: string;
  phoneCode?: string;
  password?: string;
}

interface PendingMediaGroup {
  messages: Api.Message[];
  timeout: NodeJS.Timeout;
  channelId: string;
  groupedId: string;
  mainMessage: Api.Message | null;
}

export class TelegramService extends EventEmitter {
  private client: TelegramClient;
  private isStarted = false;
  private startPromise: Promise<void> | null = null;
  private mediaService: TelegramMediaService;
  private downloadMedia: boolean;
  private stopTimeout: NodeJS.Timeout | null = null;
  private pendingMediaGroups: Map<string, PendingMediaGroup> = new Map();
  private readonly MEDIA_GROUP_TIMEOUT = 2000;
  private cronJob: any = null;
  private enableSync: boolean;
  private syncOnStart: boolean;
  private isSyncing = false;

  constructor(config: TelegramConfig) {
    super();
    const stringSession = new StringSession(config.sessionString || "");
    this.client = new TelegramClient(
      stringSession,
      config.apiId,
      config.apiHash,
      {
        connectionRetries: 5,
      },
    );

    this.downloadMedia = config.downloadMedia ?? true;
    this.enableSync = config.enableSync ?? true;
    this.syncOnStart = config.syncOnStart ?? true;
    this.mediaService = new TelegramMediaService(config.mediaDir);
    this.setupEventHandlers();
  }

  private setupEventHandlers() {
    this.client.addEventHandler(async (update: any) => {
      if (update.className === "UpdateNewChannelMessage") {
        const u = update as Api.UpdateNewChannelMessage;
        const message = u.message;
        if (!(message instanceof Api.Message)) return;

        const channelId = message.chatId ? message.chatId.toString() : null;
        if (!channelId) return;
        if (!allowedChannelsService.isChannelAllowed(channelId)) {
          return;
        }

        if (
          message.groupedId &&
          message.groupedId.toString().trim() !== "" &&
          message.media
        ) {
          await this.handleMediaGroupMessage(message, channelId);
        } else {
          await this.handleSingleMessage(message, channelId);
        }
      }

      // Existing delete handlers...
      if (update.className === "UpdateDeleteChannelMessages") {
        const u = update as Api.UpdateDeleteChannelMessages;
        const deletedMessageIds = u.messages;
        const channelId = u.channelId?.toString();
        try {
          await this.handleDeletedMessages(
            deletedMessageIds,
            channelId,
            "manual",
          );
        } catch (error) {
          console.error("Error handling deleted messages:", error);
          this.emit("error", error);
        }
      }

      if (update.className === "UpdateDeleteScheduledMessages") {
        const u = update as Api.UpdateDeleteScheduledMessages;
        const deletedMessageIds = u.messages;
        try {
          await this.handleDeletedMessages(deletedMessageIds, null, "auto");
        } catch (error) {
          console.error("Error handling auto-deleted messages:", error);
          this.emit("error", error);
        }
      }

      if (update.className === "UpdateDeleteMessages") {
        const u = update as Api.UpdateDeleteMessages;
        const deletedMessageIds = u.messages;
        try {
          await this.handleDeletedMessages(deletedMessageIds, null, "ttl");
        } catch (error) {
          console.error("Error handling TTL deleted messages:", error);
          this.emit("error", error);
        }
      }

      if (update.className === "UpdateChannelTooLong") {
        const u = update as Api.UpdateChannelTooLong;
        const channelId = u.channelId?.toString();

        if (channelId && allowedChannelsService.isChannelAllowed(channelId)) {
          console.log(
            `üì± –ö–∞–Ω–∞–ª ${channelId}: —ñ—Å—Ç–æ—Ä—ñ—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞, –º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è`,
          );
          this.emit("channelHistoryTooLong", { channelId });
        }
      }
    });
  }

  private async handleMediaGroupMessage(
    message: Api.Message,
    channelId: string,
  ) {
    const groupedId = message.groupedId!.toString();
    const groupKey = `${channelId}_${groupedId}`;

    if (this.pendingMediaGroups.has(groupKey)) {
      const pendingGroup = this.pendingMediaGroups.get(groupKey)!;
      pendingGroup.messages.push(message);

      if (message.message && message.message.trim()) {
        pendingGroup.mainMessage = message;
      } else if (!pendingGroup.mainMessage) {
        pendingGroup.mainMessage = message;
      }

      clearTimeout(pendingGroup.timeout);
      pendingGroup.timeout = setTimeout(() => {
        this.processMediaGroup(groupKey);
      }, this.MEDIA_GROUP_TIMEOUT);
    } else {
      const timeout = setTimeout(() => {
        this.processMediaGroup(groupKey);
      }, this.MEDIA_GROUP_TIMEOUT);

      this.pendingMediaGroups.set(groupKey, {
        messages: [message],
        timeout,
        channelId,
        groupedId,
        mainMessage: message.message && message.message.trim() ? message : null,
      });
    }
  }

  async syncChannel(channelId: string): Promise<void> {
    if (!this.isStarted) {
      throw new Error("Client is not started");
    }

    console.log(`üîÑ –ü–æ—á–∞—Ç–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∫–∞–Ω–∞–ª—É ${channelId}...`);

    try {
      const entity = await this.client.getEntity(channelId);

      // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É (–ø–æ —á–∞—Å—Ç–∏–Ω–∞—Ö)
      const telegramMessages = new Set<number>();
      let offset = 0;
      const limit = 100;
      let hasMore = true;

      while (hasMore) {
        const channelMessages = await this.client.getMessages(entity, {
          limit,
          offsetId: offset,
        });

        if (channelMessages.length === 0) {
          hasMore = false;
          break;
        }

        channelMessages.forEach((msg) => {
          if (msg instanceof Api.Message) {
            telegramMessages.add(msg.id);
          }
        });

        offset = channelMessages[channelMessages.length - 1].id;

        // –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ API
        await new Promise((resolve) => setTimeout(resolve, 1000));
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –±–∞–∑–∏ –¥–ª—è —Ü—å–æ–≥–æ –∫–∞–Ω–∞–ª—É
      const dbMessages = await db
        .select({ messageId: messages.messageId, id: messages.id })
        .from(messages)
        .where(eq(messages.channelId, channelId));

      const dbMessageIds = new Set(dbMessages.map((msg) => msg.messageId));

      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è (—î –≤ –±–∞–∑—ñ, –∞–ª–µ –Ω–µ–º–∞—î –≤ –∫–∞–Ω–∞–ª—ñ)
      const messagesToDelete = dbMessages.filter(
        (msg) => !telegramMessages.has(msg.messageId),
      );

      // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –±–∞–∑–∏
      if (messagesToDelete.length > 0) {
        const messageDbIds = messagesToDelete.map((msg) => msg.id);

        // –í–∏–¥–∞–ª—è—î–º–æ –º–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏
        for (const dbId of messageDbIds) {
          await this.mediaService.deleteMediaByMessageId(dbId);
        }

        // –í–∏–¥–∞–ª—è—î–º–æ –¥–æ—á—ñ—Ä–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        for (const msg of messagesToDelete) {
          await db.delete(messages).where(eq(messages.parentMessageId, msg.id));
        }

        // –í–∏–¥–∞–ª—è—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await db.delete(messages).where(inArray(messages.id, messageDbIds));

        console.log(
          `üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ ${messagesToDelete.length} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –±–∞–∑–∏ –¥–ª—è –∫–∞–Ω–∞–ª—É ${channelId}`,
        );
      }

      // // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—î –≤ –∫–∞–Ω–∞–ª—ñ, –∞–ª–µ –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ)
      // const newMessageIds = Array.from(telegramMessages).filter(
      //   (msgId) => !dbMessageIds.has(msgId),
      // );
      //
      // // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      // if (newMessageIds.length > 0) {
      //   let addedCount = 0;
      //
      //   // –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ —á–∞—Å—Ç–∏–Ω–∞—Ö —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏
      //   const batchSize = 50;
      //   for (let i = 0; i < newMessageIds.length; i += batchSize) {
      //     const batch = newMessageIds.slice(i, i + batchSize);
      //
      //     const newMessages = await this.client.getMessages(entity, {
      //       ids: batch,
      //     });
      //
      //     for (const message of newMessages) {
      //       if (message instanceof Api.Message) {
      //         try {
      //           await this.processNewMessage(message, channelId);
      //           addedCount++;
      //         } catch (error) {
      //           console.error(
      //             `–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${message.id}:`,
      //             error,
      //           );
      //         }
      //       }
      //     }
      //
      //     // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –±–∞—Ç—á–∞–º–∏
      //     await new Promise((resolve) => setTimeout(resolve, 1000));
      //   }
      //
      //   console.log(
      //     `‚ûï –î–æ–¥–∞–Ω–æ ${addedCount} –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–æ –±–∞–∑–∏ –¥–ª—è –∫–∞–Ω–∞–ª—É ${channelId}`,
      //   );
      // }

      console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∫–∞–Ω–∞–ª—É ${channelId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);

      this.emit("channelSynced", {
        channelId,
        deletedCount: messagesToDelete.length,
        // addedCount: newMessageIds.length,
      });
    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∫–∞–Ω–∞–ª—É ${channelId}:`, error);
      this.emit("syncError", { channelId, error });
      throw error;
    }
  }
  async syncAllChannels(): Promise<void> {
    if (this.isSyncing) {
      console.log("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ...");
      return;
    }

    this.isSyncing = true;
    console.log("üîÑ –ü–æ—á–∞—Ç–æ–∫ –ø–æ–≤–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –≤—Å—ñ—Ö –∫–∞–Ω–∞–ª—ñ–≤...");

    try {
      const allowedChannels = Array.from(
        allowedChannelsService.getAllowedChannelIdsSet().values(),
      );
      let syncedCount = 0;
      let errorCount = 0;

      for (const channelId of allowedChannels) {
        try {
          await this.syncChannel(channelId);
          syncedCount++;

          // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∫–∞–Ω–∞–ª–∞–º–∏
          await new Promise((resolve) => setTimeout(resolve, 2000));
        } catch (error) {
          console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∫–∞–Ω–∞–ª—É ${channelId}:`, error);
          errorCount++;
        }
      }

      console.log(
        `‚úÖ –ü–æ–≤–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${syncedCount} –∫–∞–Ω–∞–ª—ñ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ, ${errorCount} –ø–æ–º–∏–ª–æ–∫`,
      );

      this.emit("fullSyncCompleted", {
        syncedCount,
        errorCount,
        totalChannels: allowedChannels.length,
      });
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–≤–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:", error);
      this.emit("fullSyncError", error);
    } finally {
      this.isSyncing = false;
    }
  }
  private async processNewMessage(
    message: Api.Message,
    channelId: string,
  ): Promise<void> {
    if (
      message.groupedId &&
      message.groupedId.toString().trim() !== "" &&
      message.media
    ) {
      // –î–ª—è –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∏ –ø—ñ–¥ —á–∞—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –æ–±—Ä–æ–±–ª—è—î–º–æ –æ–¥—Ä–∞–∑—É
      await this.handleSingleMessage(message, channelId);
    } else {
      await this.handleSingleMessage(message, channelId);
    }
  }
  private setupDailySync(): void {
    if (!this.enableSync) return;

    // –©–æ–¥–Ω—è –æ 02:00
    this.cronJob = cron.schedule(
      "0 */2 * * *",
      async () => {
        console.log("üïê –ó–∞–ø—É—Å–∫ —â–æ–¥–µ–Ω–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∫–∞–Ω–∞–ª—ñ–≤...");
        try {
          await this.syncAllChannels();
        } catch (error) {
          console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —â–æ–¥–µ–Ω–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:", error);
        }
      },
      {
        timezone: "Europe/Kiev",
      },
    );

    this.cronJob.start();
    console.log("‚è∞ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ —â–æ–¥–µ–Ω–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –∫–∞–Ω–∞–ª—ñ–≤ (02:00)");
  }
  private async processMediaGroup(groupKey: string) {
    const pendingGroup = this.pendingMediaGroups.get(groupKey);
    if (!pendingGroup) return;

    const { messages: groupMessages, channelId, groupedId } = pendingGroup;

    // –°–æ—Ä—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ ID –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫—É
    groupMessages.sort((a, b) => a.id - b.id);

    try {
      // –í–∏–∑–Ω–∞—á–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      let mainMessage = pendingGroup.mainMessage || groupMessages[0];

      // –Ø–∫—â–æ –æ—Å–Ω–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º–∞—î —Ç–µ–∫—Å—Ç—É, —à—É–∫–∞—î–º–æ —ñ–Ω—à–µ –∑ —Ç–µ–∫—Å—Ç–æ–º
      if (!mainMessage.message || !mainMessage.message.trim()) {
        const messageWithText = groupMessages.find(
          (msg) => msg.message && msg.message.trim(),
        );
        if (messageWithText) {
          mainMessage = messageWithText;
        }
      }

      // –ó–±–∏—Ä–∞—î–º–æ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∑ —É—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≥—Ä—É–ø–∏
      const allTexts = groupMessages
        .map((msg) => msg.message || "")
        .filter((text) => text.trim())
        .join(" ");

      // –°—Ç–≤–æ—Ä—é—î–º–æ –æ—Å–Ω–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      const [createdMsg] = await db
        .insert(messages)
        .values({
          channelId,
          messageId: mainMessage.id,
          text: allTexts || "",
          date: new Date(Number(mainMessage.date) * 1000),
          groupedId: groupedId,
          isMediaGroup: true,
          parentMessageId: null,
        })
        .returning();

      const mediaPaths: string[] = [];
      let hasValidMedia = false;
      let compressionUsed = false;

      // –û–±—Ä–æ–±–ª—è—î–º–æ –≤—Å—ñ –º–µ–¥—ñ–∞ –∑ –≥—Ä—É–ø–∏
      for (const msg of groupMessages) {
        if (msg.media && this.downloadMedia) {
          if (this.isValidMediaForDownload(msg.media)) {
            const needsCompress = this.needsCompression(msg.media);
            let mediaPath: string | null = null;

            if (needsCompress) {
              console.log(
                `üîÑ –°—Ç–∏—Å–∫–∞–Ω–Ω—è –º–µ–¥—ñ–∞ –¥–ª—è –≥—Ä—É–ø–∏ ${groupedId}, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${msg.id}...`,
              );
              mediaPath = await this.mediaService.downloadAndCompressMedia(
                this.client,
                msg,
                createdMsg.id,
              );
              compressionUsed = true;
            } else {
              mediaPath = await this.mediaService.downloadAndSaveMedia(
                this.client,
                msg,
                createdMsg.id,
              );
            }

            if (mediaPath) {
              mediaPaths.push(mediaPath);
              hasValidMedia = true;
            }
          } else {
            console.warn(
              `‚ö†Ô∏è –ú–µ–¥—ñ–∞ –≤ –≥—Ä—É–ø—ñ ${groupedId} –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ: ${msg.id}`,
            );
          }
        }
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–µ—à—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≥—Ä—É–ø–∏ (–¥–ª—è –∑–≤'—è–∑–∫—É)
      for (const msg of groupMessages) {
        if (msg.id !== mainMessage.id) {
          await db.insert(messages).values({
            channelId,
            messageId: msg.id,
            text: "",
            date: new Date(Number(msg.date) * 1000),
            groupedId: groupedId,
            isMediaGroup: false,
            parentMessageId: createdMsg.id,
          });
        }
      }

      this.emit("newMessage", {
        channelId,
        messageId: mainMessage.id,
        text: allTexts,
        date: new Date(Number(mainMessage.date) * 1000),
        media: hasValidMedia,
        mediaPaths,
        isMediaGroup: true,
        mediaGroupCount: groupMessages.length,
        validMediaCount: mediaPaths.length,
        compressed: compressionUsed,
      });

      console.log(
        `üí¨ –ù–æ–≤–∞ –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∞ –∑ –∫–∞–Ω–∞–ª—É ${channelId}: "${allTexts}" [${groupMessages.length} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, ${mediaPaths.length} –º–µ–¥—ñ–∞${compressionUsed ? ", —Å—Ç–∏—Å–Ω—É—Ç–æ" : ""}]`,
      );
    } catch (error) {
      console.error("Error saving media group:", error);
      this.emit("error", error);
    } finally {
      // –û—á–∏—â–∞—î–º–æ pending –≥—Ä—É–ø—É
      clearTimeout(pendingGroup.timeout);
      this.pendingMediaGroups.delete(groupKey);
    }
  }

  private isValidMediaForDownload(media: Api.TypeMessageMedia): boolean {
    if (media instanceof Api.MessageMediaDocument) {
      const doc = media.document;
      if (doc instanceof Api.Document) {
        const absoluteMaxSize = 100 * 1024 * 1024; // 100 MB
        //@ts-ignore
        if (doc.size && doc.size > absoluteMaxSize) {
          console.warn(
            `‚ö†Ô∏è –§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π –Ω–∞–≤—ñ—Ç—å –¥–ª—è —Å—Ç–∏—Å–∫–∞–Ω–Ω—è: ${doc.size} bytes (–º–∞–∫—Å: ${absoluteMaxSize})`,
          );
          return false;
        }
      }
    }
    return true;
  }

  private needsCompression(media: Api.TypeMessageMedia): boolean {
    if (media instanceof Api.MessageMediaDocument) {
      const doc = media.document;
      if (doc instanceof Api.Document) {
        const compressionThreshold = 45 * 1024 * 1024; // 45 MB
        //@ts-ignore
        if (doc.size && doc.size > compressionThreshold) {
          if (
            doc.mimeType &&
            (doc.mimeType.startsWith("image/") ||
              doc.mimeType.startsWith("video/"))
          ) {
            return true;
          }
        }
      }
    }
    return false;
  }

  private async handleSingleMessage(message: Api.Message, channelId: string) {
    try {
      // –î–æ–¥–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫–∏–π —Ç–∞–π–º-–∞—É—Ç –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∞–º
      await new Promise((resolve) => setTimeout(resolve, Math.random() * 100));

      const [createdMsg] = await db
        .insert(messages)
        .values({
          channelId,
          messageId: message.id,
          text: message.message || "",
          date: new Date(Number(message.date) * 1000),
          isMediaGroup: false,
          groupedId: null,
          parentMessageId: null,
        })
        .returning();

      let mediaPath: string | null = null;
      let hasValidMedia = false;
      let compressionUsed = false;

      if (message.media && this.downloadMedia) {
        if (this.isValidMediaForDownload(message.media)) {
          const needsCompress = this.needsCompression(message.media);

          if (needsCompress) {
            console.log(`üîÑ –°—Ç–∏—Å–∫–∞–Ω–Ω—è –º–µ–¥—ñ–∞ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${message.id}...`);
            mediaPath = await this.mediaService.downloadAndCompressMedia(
              this.client,
              message,
              createdMsg.id,
            );
            compressionUsed = true;
          } else {
            mediaPath = await this.mediaService.downloadAndSaveMedia(
              this.client,
              message,
              createdMsg.id,
            );
          }

          hasValidMedia = !!mediaPath;
        } else {
          console.warn(
            `‚ö†Ô∏è –ú–µ–¥—ñ–∞ ${message.id} –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ –Ω–∞–≤—ñ—Ç—å –¥–ª—è —Å—Ç–∏—Å–∫–∞–Ω–Ω—è`,
          );
        }
      }

      this.emit("newMessage", {
        channelId,
        messageId: message.id,
        text: message.message,
        date: new Date(Number(message.date) * 1000),
        media: hasValidMedia,
        mediaPath,
        isMediaGroup: false,
        compressed: compressionUsed,
      });

      const mediaInfo = mediaPath
        ? ` [–º–µ–¥—ñ–∞: ${mediaPath}${compressionUsed ? " (—Å—Ç–∏—Å–Ω—É—Ç–æ)" : ""}]`
        : message.media && !hasValidMedia
          ? " [–º–µ–¥—ñ–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ - –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π]"
          : "";

      console.log(
        `üí¨ –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É ${channelId}: ${message.message}${mediaInfo}`,
      );
    } catch (error) {
      console.error("Error saving message:", error);
      this.emit("error", error);
    }
  }

  getMediaService(): TelegramMediaService {
    return this.mediaService;
  }

  private async handleDeletedMessages(
    messageIds: number[],
    channelId?: string | null,
    deleteType: "manual" | "auto" | "ttl" = "manual",
  ): Promise<void> {
    try {
      let messagesToDelete = await db
        .select()
        .from(messages)
        .where(inArray(messages.messageId, messageIds));
      if (messagesToDelete.length === 0) {
        console.log(
          `üîç –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (${deleteType}): [${messageIds.join(", ")}]`,
        );
        return;
      }

      const dbMessageIds = messagesToDelete.map((msg) => msg.id);

      // –í–∏–¥–∞–ª—è—î–º–æ –º–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏
      for (const dbMessageId of dbMessageIds) {
        await this.mediaService.deleteMediaByMessageId(dbMessageId);
      }

      // –í–∏–¥–∞–ª—è—î–º–æ –¥–æ—á—ñ—Ä–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–¥–ª—è –º–µ–¥—ñ–∞-–≥—Ä—É–ø)
      for (const msg of messagesToDelete) {
        const deletedChildMessages = await db
          .delete(messages)
          .where(eq(messages.parentMessageId, msg.id))
          .returning();

        if (deletedChildMessages.length > 0) {
          console.log(
            `üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ ${deletedChildMessages.length} –¥–æ—á—ñ—Ä–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${msg.id} (${deleteType})`,
          );
        }
      }

      // –í–∏–¥–∞–ª—è—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      const deletedMessages = await db
        .delete(messages)
        .where(inArray(messages.messageId, messageIds))
        .returning();

      const deleteIcon =
        deleteType === "auto" ? "‚è∞" : deleteType === "ttl" ? "‚è≥" : "üóëÔ∏è";
      const deleteDescription =
        deleteType === "auto"
          ? "–∞–≤—Ç–æ–≤–∏–¥–∞–ª–µ–Ω–Ω—è"
          : deleteType === "ttl"
            ? "TTL –≤–∏–¥–∞–ª–µ–Ω–Ω—è"
            : "—Ä—É—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è";

      console.log(
        `${deleteIcon} ${deleteDescription}: –≤–∏–¥–∞–ª–µ–Ω–æ ${deletedMessages.length} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å${channelId ? ` –∑ –∫–∞–Ω–∞–ª—É ${channelId}` : ""}: [${messageIds.join(", ")}]`,
      );

      this.emit("messagesDeleted", {
        deletedMessageIds: messageIds,
        deletedCount: deletedMessages.length,
        channelId,
        deleteType,
      });
    } catch (error) {
      console.error(`Error in handleDeletedMessages (${deleteType}):`, error);
      throw error;
    }
  }

  async deleteMessage(messageDbId: string): Promise<boolean> {
    try {
      await this.mediaService.deleteMediaByMessageId(messageDbId);

      const deletedChildMessages = await db
        .delete(messages)
        .where(eq(messages.parentMessageId, messageDbId))
        .returning();

      if (deletedChildMessages.length > 0) {
        console.log(
          `üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ ${deletedChildMessages.length} –¥–æ—á—ñ—Ä–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${messageDbId}`,
        );
      }

      const deletedRows = await db
        .delete(messages)
        .where(eq(messages.id, messageDbId))
        .returning();

      if (deletedRows.length > 0) {
        console.log(`üóëÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${messageDbId} –≤–∏–¥–∞–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É`);
        this.emit("messageDeleted", { messageId: messageDbId });
        return true;
      }

      return false;
    } catch (error) {
      console.error("Error deleting message:", error);
      this.emit("error", error);
      return false;
    }
  }

  async downloadMessageMedia(
    channelId: string,
    messageId: number,
  ): Promise<string | null> {
    try {
      const entity = await this.client.getEntity(channelId);
      const [message] = await this.client.getMessages(entity, {
        ids: [messageId],
      });

      if (!message || !message.media) {
        return null;
      }

      if (!this.isValidMediaForDownload(message.media)) {
        console.warn(`‚ö†Ô∏è –ú–µ–¥—ñ–∞ ${messageId} –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è`);
        return null;
      }

      const dbMessage = await db
        .select()
        .from(messages)
        .where(
          and(
            eq(messages.channelId, channelId),
            eq(messages.messageId, messageId),
          ),
        )
        .limit(1);

      if (dbMessage.length === 0) {
        return null;
      }

      return await this.mediaService.downloadAndSaveMedia(
        this.client,
        message,
        dbMessage[0].id,
      );
    } catch (error) {
      console.error("Error downloading media:", error);
      return null;
    }
  }

  async deleteMessageByChannelAndId(
    channelId: string,
    messageId: number,
  ): Promise<boolean> {
    try {
      const messageToDelete = await db
        .select()
        .from(messages)
        .where(
          and(
            eq(messages.channelId, channelId),
            eq(messages.messageId, messageId),
          ),
        )
        .limit(1);

      if (messageToDelete.length === 0) {
        console.log(
          `üîç –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${messageId} –≤ –∫–∞–Ω–∞–ª—ñ ${channelId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`,
        );
        return false;
      }

      return await this.deleteMessage(messageToDelete[0].id);
    } catch (error) {
      console.error("Error deleting message by channel and id:", error);
      this.emit("error", error);
      return false;
    }
  }

  async start(
    authCallback?: (
      type: "phoneNumber" | "phoneCode" | "password",
    ) => Promise<string>,
  ): Promise<void> {
    if (this.isStarted) {
      return;
    }

    if (this.startPromise) {
      return this.startPromise;
    }

    this.startPromise = this.client
      .start({
        phoneNumber: async () => {
          if (authCallback) {
            return await authCallback("phoneNumber");
          }
          throw new Error("Phone number required");
        },
        password: async () => {
          if (authCallback) {
            return await authCallback("password");
          }
          throw new Error("Password required");
        },
        phoneCode: async () => {
          if (authCallback) {
            return await authCallback("phoneCode");
          }
          throw new Error("Phone code required");
        },
        onError: (err) => {
          console.error("Telegram auth error:", err);
          this.emit("authError", err);
        },
      })
      .then(async () => {
        this.isStarted = true;
        console.log("üü¢ Telegram userbot –∑–∞–ø—É—â–µ–Ω–æ!");

        // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —â–æ–¥–µ–Ω–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
        this.setupDailySync();

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
        if (this.syncOnStart) {
          console.log("üîÑ –ó–∞–ø—É—Å–∫ –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó...");
          // –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤ —Ñ–æ–Ω—ñ
          setTimeout(() => {
            this.syncAllChannels().catch((error) => {
              console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:", error);
            });
          }, 5000); // –ó–∞—Ç—Ä–∏–º–∫–∞ 5 —Å–µ–∫—É–Ω–¥ –ø—ñ—Å–ª—è —Å—Ç–∞—Ä—Ç—É
        }

        this.emit("started");
      });

    return this.startPromise;
  }

  async delete(sessionId: string): Promise<string> {
    await this.stop();
    const deletedRows = await db
      .delete(telegramSessions)
      .where(eq(telegramSessions.sessionId, sessionId))
      .returning();
    return "Deleted";
  }

  async stop(): Promise<void> {
    if (!this.client || !this.isStarted) {
      console.log("üü° Telegram client already stopped or not started");
      return;
    }

    try {
      console.log("üîÑ Stopping Telegram client...");

      // –ó—É–ø–∏–Ω—è—î–º–æ cron –∑–∞–≤–¥–∞–Ω–Ω—è
      if (this.cronJob) {
        this.cronJob.stop();
        this.cronJob.destroy();
        this.cronJob = null;
        console.log("‚è∞ –©–æ–¥–µ–Ω–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑—É–ø–∏–Ω–µ–Ω–∞");
      }

      // Existing stop logic...
      for (const [key, pendingGroup] of this.pendingMediaGroups) {
        clearTimeout(pendingGroup.timeout);
        await this.processMediaGroup(key);
      }
      this.pendingMediaGroups.clear();

      const disconnectPromise = new Promise<void>((resolve, reject) => {
        if (!this.client) {
          resolve();
          return;
        }

        this.stopTimeout = setTimeout(() => {
          console.warn("‚ö†Ô∏è Disconnect timeout, forcing stop...");
          this.forceStop();
          resolve();
        }, 5000);

        this.client
          .disconnect()
          .then(() => {
            if (this.stopTimeout) {
              clearTimeout(this.stopTimeout);
              this.stopTimeout = null;
            }
            console.log("‚úÖ Telegram client disconnected gracefully");
            resolve();
          })
          .catch((error) => {
            if (this.stopTimeout) {
              clearTimeout(this.stopTimeout);
              this.stopTimeout = null;
            }
            console.warn("‚ö†Ô∏è Disconnect error, forcing stop:", error.message);
            this.forceStop();
            resolve();
          });
      });

      await disconnectPromise;
    } catch (error) {
      console.error("‚ùå Error during stop:", error);
      this.forceStop();
    } finally {
      this.cleanup();
    }
  }
  private forceStop(): void {
    console.log("üö® Force stopping Telegram client...");

    try {
      if (this.client) {
        if (typeof this.client.destroy === "function") {
          this.client.destroy();
        }
      }
    } catch (error) {
      console.warn("‚ö†Ô∏è Error during force stop:", error);
    }

    this.cleanup();
  }

  private cleanup(): void {
    this.isStarted = false;
    this.startPromise = null;
    this.isSyncing = false;

    if (this.stopTimeout) {
      clearTimeout(this.stopTimeout);
      this.stopTimeout = null;
    }

    // –ó—É–ø–∏–Ω—è—î–º–æ cron –∑–∞–≤–¥–∞–Ω–Ω—è
    if (this.cronJob) {
      this.cronJob.stop();
      this.cronJob.destroy();
      this.cronJob = null;
    }

    // –û—á–∏—â–∞–µ–º pending –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
    for (const pendingGroup of this.pendingMediaGroups.values()) {
      clearTimeout(pendingGroup.timeout);
    }
    this.pendingMediaGroups.clear();

    console.log("üî¥ Telegram userbot –∑—É–ø–∏–Ω–µ–Ω–æ!");
    this.emit("stopped");
  }
  isSyncInProgress(): boolean {
    return this.isSyncing;
  }

  getSyncConfig(): { enableSync: boolean; syncOnStart: boolean } {
    return {
      enableSync: this.enableSync,
      syncOnStart: this.syncOnStart,
    };
  }
  async quickStop(): Promise<void> {
    console.log("‚ö° Quick stopping Telegram client...");
    this.forceStop();
  }

  getSessionString(): string {
    try {
      return this.client.session.save() as unknown as string;
    } catch {
      return "";
    }
  }

  isClientStarted(): boolean {
    return this.isStarted;
  }

  getClient(): TelegramClient {
    return this.client;
  }
}

export default TelegramService;
